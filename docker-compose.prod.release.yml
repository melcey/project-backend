# Docker Compose file for Production deployment of the backend in Release configuration

services:
  # The Eureka Server microservice container
  eureka-server:
    # Building properties
    build:
      # It will build from the local eureka-server project directory
      context: ./eureka-server
      dockerfile: release.Dockerfile
    # Name of the container
    container_name: eureka-server
    # The container will always be restarted
    restart: always
    ports:
      # The port 8761 of the machine is mapped into the port 8761 of the container
      - "8761:8761"
    # The container uses the network "shared-net"
    networks:
      - shared-net
    # The container will be run in the prod environment
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    # The health check performed for the container
    healthcheck:
      # Checks whether the status is UP
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      # The health check will be performed every 5 seconds
      interval: 5s
      # The command must be completed in 5 seconds
      timeout: 5s
      # After 5 retries, the container will be marked as unhealthy
      retries: 5

  # The gateway microservice container
  gateway:
    # Building properties
    build:
    # It will build from the local gateway project directory
      context: ./gateway
      dockerfile: release.Dockerfile
    # Name of the container
    container_name: gateway
    # The container will always be restarted
    restart: always
    ports:
      # The port 8080 of the machine is mapped into the port 8080 of the container
      - "8080:8080"
    depends_on:
      # Depends on the Eureka Server microservice working healthily
      eureka-server:
        condition: service_healthy
    # The container uses the network "shared-net"
    networks:
      - shared-net
    # The container will be run in the prod environment
    environment:
      - SPRING_PROFILES_ACTIVE=prod

  # The user microservice container
  user-service:
    # Building properties
    build:
    # It will build from the local gateway project directory
      context: ./user-service
      dockerfile: release.Dockerfile
    # Name of the container
    container_name: user-service
    # The container will always be restarted
    restart: always
    ports:
      # The port 8081 of the machine is mapped into the port 8080 of the container
      - "8081:8080"
    depends_on:
      # Depends on the Eureka Server microservice working healthily
      eureka-server:
        condition: service_healthy
      # Depends on the PostgreSQL microservice working healthily
      postgres:
        condition: service_healthy
    # The container uses the network "shared-net"
    networks:
      - shared-net
    environment:
      # The container will be run in the prod environment
      - SPRING_PROFILES_ACTIVE=prod
    # Retrieves environment variables from the .env file
    env_file:
      - .env

  # The container for the actual dev database
  postgres:
    # Name of the container
    container_name: postgres
    image: postgres:17.4
    # The container will always be restarted
    restart: always
    # Volumes to be used by the container
    volumes:
      # The initialization script's directory on the container
      - postgres_data:/var/lib/postgresql/data
    # The container uses the network "shared-net-dev"
    networks:
      - shared-net
    ports:
      # The port 5432 of the machine is mapped into the port 5432 of the container
      - "5432:5432"
    # Retrieves the username and password data for admin from the .env file
    env_file:
      - .env
    # The health check performed for the container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER}"]
      # The health check will be performed every 5 seconds
      interval: 5s
      # The command must be completed in 5 seconds
      timeout: 5s
      # After 5 retries, the container will be marked as unhealthy
      retries: 5

  # Flyway container for running migrations
  flyway:
    # Name of the container
    container_name: flyway
    image: flyway/flyway:latest
    # Retrieves the username and password data for admin from the .env file
    env_file:
      - .env
    command: -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB} -user=${POSTGRES_ADMIN_USER} -password=${POSTGRES_PASSWORD} migrate
    # The container will always be restarted
    restart: always
    depends_on:
      # Depends on the PostgreSQL microservice working healthily
      postgres:
        condition: service_healthy
    # Copies the migrations to the appropriate directory on the container
    volumes:
      - ./db/migration:/flyway/sql
    # The container uses the network "shared-net"
    networks:
      - shared-net

  # Database initialization container
  db-init:
    # Name of the container
    container_name: db-init
    image: postgres:17.4
    # Does not restart when it is run once (either when the DB is run for the first time, or there is an update in db_init.sql)
    restart: "no"
    # Retrieves environment variables from the .env file
    env_file:
      - .env
    # Depends on the actual database container
    depends_on:
      - postgres
    # Runs the below command to initialize the database
      # POSTGRES_ADMIN_USER, POSTGRES_PASSWORD, and POSTGRES_INIT_DB are environment variables retrieved above from the .env file
      # Waits until the database container is ready to run
      # Then, connects to the database to run the initialization script
    entrypoint: >
      bash -c "
      echo 'Waiting for PostgreSQL to be ready...';
      until pg_isready -h postgres -p 5432 -U ${POSTGRES_ADMIN_USER}; do sleep 2; done;
      echo 'PostgreSQL is ready! Running initialization script...';
      export PGPASSWORD=${POSTGRES_PASSWORD};
      psql -h postgres -U ${POSTGRES_ADMIN_USER} -d ${POSTGRES_INIT_DB} -f /docker-entrypoint-initdb.d/db_init.sql;
      echo 'Database is initialized successfully.'"
    # Volumes to be used by the container
    volumes:
      # The actual database
      - postgres_data:/var/lib/postgresql/data
      # The initialization script is copied into the path specified after colon on the container
      - ./db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
    # The container uses the network "shared-net"
    networks:
      - shared-net

# Declaration of the volume for the database
volumes:
  postgres_data:

# The common network for the containers
networks:
  shared-net:
    driver: bridge