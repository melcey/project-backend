# Docker Compose file for Production deployment of the backend in Release configuration

services:
  # The container for the monolithic backend
  backend:
    build:
      context: ./backend
      dockerfile: release.Dockerfile
    # Name of the container
    container_name: backend
    # The container will always be restarted
    restart: always
    ports:
      # The port 8080 of the machine is mapped into the port 8080 of the container
      - "8080:8080"
    depends_on:
      # Depends on the PostgreSQL container working healthily
      postgres:
        condition: service_healthy
    networks:
      # The container uses the internal network "backend-net" to communicate with the database
      - backend-net
      # The container uses the external network "website-net" to communicate with the frontend container
      - website-net
    environment:
      # The container will be run in the prod environment
      - SPRING_PROFILES_ACTIVE=prod

  # The container for the prod database
  postgres:
    # Name of the container
    container_name: postgres
    image: postgres:17.4
    # The container will always be restarted
    restart: always
    # Volumes to be used by the container
    volumes:
      # The volume for the database
      - postgres_data:/var/lib/postgresql/data
    networks:
      # The container uses the internal network "backend-net"
      - backend-net
    ports:
      # The port 5432 of the machine is mapped into the port 5432 of the container
      - "5432:5432"
    # Environment variables for the connection
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=pg_admin_pwd
      - POSTGRES_DB=project_db
    # The health check performed for the container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      # The health check will be performed every 5 seconds
      interval: 5s
      # The command must be completed in 5 seconds
      timeout: 5s
      # After 10 retries, the container will be marked as unhealthy
      retries: 10

# Declaration of the volume for the database
volumes:
  postgres_data:

# The common networks for the containers
networks:
  # backend-net is the internal network
  backend-net:
    driver: bridge
  # website-net is the external network
  website-net:
    external: true